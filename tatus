GITIGNORE(5)                   Git Manual                   GITIGNORE(5)

[1mNAME[0m
       gitignore - Specifies intentionally untracked files to ignore

[1mSYNOPSIS[0m
       $HOME/.config/git/ignore, $GIT_DIR/info/exclude, .gitignore

[1mDESCRIPTION[0m
       A [1mgitignore [22mfile specifies intentionally untracked files that Git
       should ignore. Files already tracked by Git are not affected; see
       the NOTES below for details.

       Each line in a [1mgitignore [22mfile specifies a pattern. When deciding
       whether to ignore a path, Git normally checks [1mgitignore [22mpatterns
       from multiple sources, with the following order of precedence,
       from highest to lowest (within one level of precedence, the last
       matching pattern decides the outcome):

       Â·   Patterns read from the command line for those commands that
           support them.

       Â·   Patterns read from a [1m.gitignore [22mfile in the same directory as
           the path, or in any parent directory, with patterns in the
           higher level files (up to the toplevel of the work tree)
           being overridden by those in lower level files down to the
           directory containing the file. These patterns match relative
           to the location of the [1m.gitignore [22mfile. A project normally
           includes such [1m.gitignore [22mfiles in its repository, containing
           patterns for files generated as part of the project build.

       Â·   Patterns read from [1m$GIT_DIR/info/exclude[22m.

       Â·   Patterns read from the file specified by the configuration
           variable [1mcore.excludesFile[22m.

       Which file to place a pattern in depends on how the pattern is
       meant to be used.

       Â·   Patterns which should be version-controlled and distributed
           to other repositories via clone (i.e., files that all
           developers will want to ignore) should go into a [1m.gitignore[0m
           file.

       Â·   Patterns which are specific to a particular repository but
           which do not need to be shared with other related
           repositories (e.g., auxiliary files that live inside the
           repository but are specific to one userâ€™s workflow) should go
           into the [1m$GIT_DIR/info/exclude [22mfile.

       Â·   Patterns which a user wants Git to ignore in all situations
           (e.g., backup or temporary files generated by the userâ€™s
           editor of choice) generally go into a file specified by
           [1mcore.excludesFile [22min the userâ€™s [1m~/.gitconfig[22m. Its default
           value is $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is
           either not set or empty, $HOME/.config/git/ignore is used
           instead.

       The underlying Git plumbing tools, such as [4mgit[24m [4mls-files[24m and [4mgit[0m
       [4mread-tree[24m, read [1mgitignore [22mpatterns specified by command-line
       options, or from files specified by command-line options.
       Higher-level Git tools, such as [4mgit[24m [4mstatus[24m and [4mgit[24m [4madd[24m, use
       patterns from the sources specified above.

[1mPATTERN FORMAT[0m
       Â·   A blank line matches no files, so it can serve as a separator
           for readability.

       Â·   A line starting with # serves as a comment. Put a backslash
           ("[1m\[22m") in front of the first hash for patterns that begin with
           a hash.

       Â·   Trailing spaces are ignored unless they are quoted with
           backslash ("[1m\[22m").

       Â·   An optional prefix "[1m![22m" which negates the pattern; any
           matching file excluded by a previous pattern will become
           included again. It is not possible to re-include a file if a
           parent directory of that file is excluded. Git doesnâ€™t list
           excluded directories for performance reasons, so any patterns
           on contained files have no effect, no matter where they are
           defined. Put a backslash ("[1m\[22m") in front of the first "[1m![22m" for
           patterns that begin with a literal "[1m![22m", for example,
           "[1m\!important!.txt[22m".

       Â·   If the pattern ends with a slash, it is removed for the
           purpose of the following description, but it would only find
           a match with a directory. In other words, [1mfoo/ [22mwill match a
           directory [1mfoo [22mand paths underneath it, but will not match a
           regular file or a symbolic link [1mfoo [22m(this is consistent with
           the way how pathspec works in general in Git).

       Â·   If the pattern does not contain a slash [4m/[24m, Git treats it as a
           shell glob pattern and checks for a match against the
           pathname relative to the location of the [1m.gitignore [22mfile
           (relative to the toplevel of the work tree if not from a
           [1m.gitignore [22mfile).

       Â·   Otherwise, Git treats the pattern as a shell glob suitable
           for consumption by fnmatch(3) with the FNM_PATHNAME flag:
           wildcards in the pattern will not match a / in the pathname.
           For example, "Documentation/*.html" matches
           "Documentation/git.html" but not "Documentation/ppc/ppc.html"
           or "tools/perf/Documentation/perf.html".

       Â·   A leading slash matches the beginning of the pathname. For
           example, "/*.c" matches "cat-file.c" but not
           "mozilla-sha1/sha1.c".

       Two consecutive asterisks ("[1m**[22m") in patterns matched against full
       pathname may have special meaning:

       Â·   A leading "[1m**[22m" followed by a slash means match in all
           directories. For example, "[1m**/foo[22m" matches file or directory
           "[1mfoo[22m" anywhere, the same as pattern "[1mfoo[22m". "[1m**/foo/bar[22m"
           matches file or directory "[1mbar[22m" anywhere that is directly
           under directory "[1mfoo[22m".

       Â·   A trailing "[1m/**[22m" matches everything inside. For example,
           "[1mabc/**[22m" matches all files inside directory "[1mabc[22m", relative
           to the location of the [1m.gitignore [22mfile, with infinite depth.

       Â·   A slash followed by two consecutive asterisks then a slash
           matches zero or more directories. For example, "[1ma/**/b[22m"
           matches "[1ma/b[22m", "[1ma/x/b[22m", "[1ma/x/y/b[22m" and so on.

       Â·   Other consecutive asterisks are considered invalid.

[1mNOTES[0m
       The purpose of gitignore files is to ensure that certain files
       not tracked by Git remain untracked.

       To stop tracking a file that is currently tracked, use [4mgit[24m [4mrm[0m
       [4m--cached[24m.

[1mEXAMPLES[0m
               $ git status
               [...]
               # Untracked files:
               [...]
               #       Documentation/foo.html
               #       Documentation/gitignore.html
               #       file.o
               #       lib.a
               #       src/internal.o
               [...]
               $ cat .git/info/exclude
               # ignore objects and archives, anywhere in the tree.
               *.[oa]
               $ cat Documentation/.gitignore
               # ignore generated html files,
               *.html
               # except foo.html which is maintained by hand
               !foo.html
               $ git status
               [...]
               # Untracked files:
               [...]
               #       Documentation/foo.html
               [...]

       Another example:

               $ cat .gitignore
               vmlinux*
               $ ls arch/foo/kernel/vm*
               arch/foo/kernel/vmlinux.lds.S
               $ echo '!/vmlinux*' >arch/foo/kernel/.gitignore

       The second .gitignore prevents Git from ignoring
       [1march/foo/kernel/vmlinux.lds.S[22m.

       Example to exclude everything except a specific directory [1mfoo/bar[0m
       (note the [1m/* [22m- without the slash, the wildcard would also exclude
       everything within [1mfoo/bar[22m):

               $ cat .gitignore
               # exclude everything except directory foo/bar
               /*
               !/foo
               /foo/*
               !/foo/bar

[1mSEE ALSO[0m
       [1mgit-rm[22m(1), [1mgitrepository-layout[22m(5), [1mgit-check-ignore[22m(1)

[1mGIT[0m
       Part of the [1mgit[22m(1) suite

Git 2.9.3                      04/04/2017                   GITIGNORE(5)
